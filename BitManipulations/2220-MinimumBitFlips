# https://leetcode.com/problems/minimum-bit-flips-to-convert-number/description/

class Solution:
    def minBitFlips(self, start: int, goal: int) -> int:
        def Num2Binary(num):
            Binarybit = []
            while num > 0:
                Binarybit.append(num%2)
                num = num // 2
            return Binarybit
        big, small = (start, goal) if start >= goal else (goal, start)
        start_bin = Num2Binary(big)
        goal_bin = Num2Binary(small)
        goal_bin.extend([0]*(len(start_bin) - len(goal_bin)))
        flips = 0
        for i in range(len(start_bin)):
            if start_bin[i] != goal_bin[i]:
                flips += 1
        return flips        

        
